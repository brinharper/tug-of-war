x = 3
w = ifelse(x %in% winners, 1, 2)
w
x = 14
w = ifelse(x %in% winners, 1, 2)
w
jsonFile = "stim.json"
stim <- fromJSON("stim.json")
df.results <- data.frame(id=integer(), winner=integer(), strength=integer())
winners <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 21, 23, 24, 25, 27)
for (x in 1:5) {
scene = stim$scenarios[x,]
retObject = 'return { '
for (i in 1:length(scene$questions[[1]])) {
elementToAdd = ""
if (scene$questions[[1]][i] == 0) {
elementToAdd = paste0("'strength", scene$subjects[[1]][i, 1], "': strength(", scene$subjects[[1]][i, 1], ")")
} else if (scene$questions[[1]][i] == 1) {
elementToAdd = paste0("'laziness", scene$subjects[[1]][i, 1], scene$subjects[[1]][i, 2], "': lazy(", scene$subjects[[1]][i, 1], ", ", scene$subjects[[1]][i, 2], ")")
} else if (scene$questions[[1]][i] == 2) {
elementToAdd = paste0("'beat", scene$subjects[[1]][i, 1], scene$subjects[[1]][i, 2], "': beat(", scene$subjects[[1]][i, 1], ", ", scene$subjects[[1]][i, 2], ")")
}
if (i < length(scene$questions[[1]])) {
elementToAdd = paste0(elementToAdd, ", ")
}
retObject = paste0(retObject, elementToAdd)
}
retObject = paste0(retObject, "}}")
newModel = paste0(towModel, retObject)
dataToWebPPL = list(lazinessPrior = 0.3,
lazyPulling = 0.5,
matchInfo = scene)
rs <- webppl(program_code = newModel,
model_var = "tugOfWarModel",
inference_opts = list(method = 'rejection', samples = 1000),
data = dataToWebPPL,
data_var = "datafromR",
output_format = "samples"
)
w = ifelse(x %in% winners, 1, 2)
df.results[x,] <- c(x, w, mean(rs$strength1))
}
View(df.results)
jsonFile = "stim.json"
stim <- fromJSON("stim.json")
df.results <- data.frame(id=integer(), winner=integer(), strength=integer())
winners <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 21, 23, 24, 25, 27)
for (x in 1:30) {
scene = stim$scenarios[x,]
retObject = 'return { '
for (i in 1:length(scene$questions[[1]])) {
elementToAdd = ""
if (scene$questions[[1]][i] == 0) {
elementToAdd = paste0("'strength", scene$subjects[[1]][i, 1], "': strength(", scene$subjects[[1]][i, 1], ")")
} else if (scene$questions[[1]][i] == 1) {
elementToAdd = paste0("'laziness", scene$subjects[[1]][i, 1], scene$subjects[[1]][i, 2], "': lazy(", scene$subjects[[1]][i, 1], ", ", scene$subjects[[1]][i, 2], ")")
} else if (scene$questions[[1]][i] == 2) {
elementToAdd = paste0("'beat", scene$subjects[[1]][i, 1], scene$subjects[[1]][i, 2], "': beat(", scene$subjects[[1]][i, 1], ", ", scene$subjects[[1]][i, 2], ")")
}
if (i < length(scene$questions[[1]])) {
elementToAdd = paste0(elementToAdd, ", ")
}
retObject = paste0(retObject, elementToAdd)
}
retObject = paste0(retObject, "}}")
newModel = paste0(towModel, retObject)
dataToWebPPL = list(lazinessPrior = 0.3,
lazyPulling = 0.5,
matchInfo = scene)
rs <- webppl(program_code = newModel,
model_var = "tugOfWarModel",
inference_opts = list(method = 'rejection', samples = 1000),
data = dataToWebPPL,
data_var = "datafromR",
output_format = "samples"
)
w = ifelse(x %in% winners, 1, 2)
df.results[x,] <- c(x, w, mean(rs$strength1))
}
View(df.results)
jsonFile = "stim.json"
stim <- fromJSON("stim.json")
df.results <- data.frame(id=integer(), winner=integer(), strength=integer())
winners <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 21, 23, 24, 25, 27)
for (x in 1:30) {
scene = stim$scenarios[x,]
retObject = 'return { '
for (i in 1:length(scene$questions[[1]])) {
elementToAdd = ""
if (scene$questions[[1]][i] == 0) {
elementToAdd = paste0("'strength", scene$subjects[[1]][i, 1], "': strength(", scene$subjects[[1]][i, 1], ")")
} else if (scene$questions[[1]][i] == 1) {
elementToAdd = paste0("'laziness", scene$subjects[[1]][i, 1], scene$subjects[[1]][i, 2], "': lazy(", scene$subjects[[1]][i, 1], ", ", scene$subjects[[1]][i, 2], ")")
} else if (scene$questions[[1]][i] == 2) {
elementToAdd = paste0("'beat", scene$subjects[[1]][i, 1], scene$subjects[[1]][i, 2], "': beat(", scene$subjects[[1]][i, 1], ", ", scene$subjects[[1]][i, 2], ")")
}
if (i < length(scene$questions[[1]])) {
elementToAdd = paste0(elementToAdd, ", ")
}
retObject = paste0(retObject, elementToAdd)
}
retObject = paste0(retObject, "}}")
newModel = paste0(towModel, retObject)
dataToWebPPL = list(lazinessPrior = 0.3,
lazyPulling = 0.5,
matchInfo = scene)
rs <- webppl(program_code = newModel,
model_var = "tugOfWarModel",
inference_opts = list(method = 'rejection', samples = 1000),
data = dataToWebPPL,
data_var = "datafromR",
output_format = "samples"
)
w = ifelse(x %in% winners, 1, 2)
df.results[x,] <- c(x, w, mean(rs$strength1))
}
jsonFile = "stim.json"
stim <- fromJSON("stim.json")
df.results <- data.frame(id=integer(), winner=integer(), rating=integer())
winners <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 21, 23, 24, 25, 27)
for (x in 1:30) {
scene = stim$scenarios[x,]
retObject = 'return { '
for (i in 1:length(scene$questions[[1]])) {
elementToAdd = ""
if (scene$questions[[1]][i] == 0) {
elementToAdd = paste0("'strength", scene$subjects[[1]][i, 1], "': strength(", scene$subjects[[1]][i, 1], ")")
} else if (scene$questions[[1]][i] == 1) {
elementToAdd = paste0("'laziness", scene$subjects[[1]][i, 1], scene$subjects[[1]][i, 2], "': lazy(", scene$subjects[[1]][i, 1], ", ", scene$subjects[[1]][i, 2], ")")
} else if (scene$questions[[1]][i] == 2) {
elementToAdd = paste0("'beat", scene$subjects[[1]][i, 1], scene$subjects[[1]][i, 2], "': beat(", scene$subjects[[1]][i, 1], ", ", scene$subjects[[1]][i, 2], ")")
}
if (i < length(scene$questions[[1]])) {
elementToAdd = paste0(elementToAdd, ", ")
}
retObject = paste0(retObject, elementToAdd)
}
retObject = paste0(retObject, "}}")
newModel = paste0(towModel, retObject)
dataToWebPPL = list(lazinessPrior = 0.3,
lazyPulling = 0.5,
matchInfo = scene)
rs <- webppl(program_code = newModel,
model_var = "tugOfWarModel",
inference_opts = list(method = 'rejection', samples = 1000),
data = dataToWebPPL,
data_var = "datafromR",
output_format = "samples"
)
w = ifelse(x %in% winners, 1, 2)
df.results[x,] <- c(x, w, mean(rs$strength1))
}
View(df.results)
df.plot = df.results %>%
mutate(rating = rating-50) %>%
mutate(winner = factor(winner,levels = c("1","2"),labels = c('Win', "Loss")),
rating = ifelse(winner == "Loss", rating*-1, rating))
ggplot(df.plot,aes(x = id, y = rating))+
geom_bar(color = 'black',fill = 'gray80')+
stat_summary(fun.data = 'mean_cl_boot',geom='linerange',size = 1)+
facet_wrap(~winner,scales = "free_x",ncol=1)+
labs(y = 'weakness/strength judgment', x = 'tournament number')+
theme_bw()+
theme(text = element_text(size = 20),
panel.grid = element_blank())
View(df.plot)
df.plot = df.results %>%
mutate(rating = rating-50) %>%
mutate(winner = factor(winner,levels = c("1","2"),labels = c('Win', "Loss")),
rating = ifelse(winner == "Loss", rating*-1, rating))
ggplot(df.plot,aes(x = id, y = rating))+
geom_bar(stat='identity', color = 'black',fill = 'gray80')+
stat_summary(fun.data = 'mean_cl_boot',geom='linerange',size = 1)+
facet_wrap(~winner,scales = "free_x",ncol=1)+
labs(y = 'weakness/strength judgment', x = 'tournament number')+
theme_bw()+
theme(text = element_text(size = 20),
panel.grid = element_blank())
df.plot = df.results %>%
mutate(rating = rating-50) %>%
mutate(winner = factor(winner,levels = c("1","2"),labels = c('Win', "Loss")),
rating = ifelse(winner == "Loss", rating*-1, rating))
ggplot(df.plot,aes(x = id, y = rating))+
geom_bar(stat='identity', color = 'black',fill = 'gray80')+
stat_summary(fun.data = 'mean_cl_boot',geom='linerange',size = 1)+
facet_wrap(~winner,scales = "free_x",ncol=1)+
labs(y = 'weakness/strength judgment', x = 'tournament number')+
theme_bw()+
theme(text = element_text(size = 20),
panel.grid = element_blank())
ggsave('../../../figures/plots/model1_bars.pdf',width=10,height=6)
df.plot = df.results %>%
mutate(rating = rating-50) %>%
mutate(winner = factor(winner,levels = c("1","2"),labels = c('Win', "Loss")),
rating = ifelse(winner == "Loss", rating*-1, rating))
ggplot(df.plot,aes(x = id, y = rating))+
geom_bar(stat='identity', color = 'black',fill = 'gray80')+
stat_summary(fun.data = 'mean_cl_boot',geom='linerange',size = 1)+
facet_wrap(~winner,scales = "free_x",ncol=1)+
labs(y = 'weakness/strength judgment', x = 'tournament number')+
theme_bw()+
theme(text = element_text(size = 20),
panel.grid = element_blank())
ggsave('../../../figures/plots/model1_bars.pdf',width=10,height=6)
help("indentity")
help("identity")
df.plot = df.results %>%
mutate(rating = rating-50) %>%
mutate(winner = factor(winner,levels = c("1","2"),labels = c('Win', "Loss")),
rating = ifelse(winner == "Loss", rating*-1, rating))
ggplot(df.plot,aes(x = id, y = rating))+
stat_summary(fun.y = 'identity',geom='bar',color = 'black',fill = 'gray80')+
stat_summary(fun.data = 'mean_cl_boot',geom='linerange',size = 1)+
facet_wrap(~winner,scales = "free_x",ncol=1)+
labs(y = 'weakness/strength judgment', x = 'tournament number')+
theme_bw()+
theme(text = element_text(size = 20),
panel.grid = element_blank())
ggsave('../../../figures/plots/model1_bars.pdf',width=10,height=6)
df.plot = df.results %>%
mutate(rating = rating-50) %>%
mutate(id = as.factor(id),
winner = factor(winner,levels = c("1","2"),labels = c('Win', "Loss")),
rating = ifelse(winner == "Loss", rating*-1, rating))
ggplot(df.plot,aes(x = id, y = rating))+
stat_summary(fun.y = 'identity',geom='bar',color = 'black',fill = 'gray80')+
stat_summary(fun.data = 'mean_cl_boot',geom='linerange',size = 1)+
facet_wrap(~winner,scales = "free_x",ncol=1)+
labs(y = 'weakness/strength judgment', x = 'tournament number')+
theme_bw()+
theme(text = element_text(size = 20),
panel.grid = element_blank())
ggsave('../../../figures/plots/model1_bars.pdf',width=10,height=6)
towModel <- '
// unpack data from R
var lazinessPrior = datafromR["lazinessPrior"][0]
var lazyPulling = datafromR["lazyPulling"][0]
var matchInfo = datafromR["matchInfo"][0]
var tugOfWarModel = function(){
var strength = mem(function(person) {
return gaussian(50, 25)
})
var lazy = mem(function(person, match) {
return flip(lazinessPrior)
})
var pulling = function(person, match) {
return lazy(person, match) ? strength(person) - 13 : strength(person)
}
var totalPulling = function(team, match) {
return sum(map(function(person) {
return pulling(person, match)
}, team))
}
var winner = function(team1, team2, match) {
return totalPulling(team1, match) > totalPulling(team2, match) ? team1 : team2
}
var beat = function(team1,team2, match){
return winner(team1,team2, match) == team1
}
var conditions = function(i, len) {
if (i < len) {
if (matchInfo.games[i].winner == 1) {
condition(beat(matchInfo.games[i].team1,
matchInfo.games[i].team2,
i + 1));
} else if (matchInfo.games[i].winner == 2) {
condition(beat(matchInfo.games[i].team2,
matchInfo.games[i].team1,
i + 1));
}
conditions(i + 1, len);
}
}
conditions(0, matchInfo.games.length);
'
jsonFile = "stim.json"
stim <- fromJSON("stim.json")
df.results <- data.frame(id=integer(), winner=integer(), rating=integer())
winners <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 21, 23, 24, 25, 27)
for (x in 1:30) {
scene = stim$scenarios[x,]
retObject = 'return { '
for (i in 1:length(scene$questions[[1]])) {
elementToAdd = ""
if (scene$questions[[1]][i] == 0) {
elementToAdd = paste0("'strength", scene$subjects[[1]][i, 1], "': strength(", scene$subjects[[1]][i, 1], ")")
} else if (scene$questions[[1]][i] == 1) {
elementToAdd = paste0("'laziness", scene$subjects[[1]][i, 1], scene$subjects[[1]][i, 2], "': lazy(", scene$subjects[[1]][i, 1], ", ", scene$subjects[[1]][i, 2], ")")
} else if (scene$questions[[1]][i] == 2) {
elementToAdd = paste0("'beat", scene$subjects[[1]][i, 1], scene$subjects[[1]][i, 2], "': beat(", scene$subjects[[1]][i, 1], ", ", scene$subjects[[1]][i, 2], ")")
}
if (i < length(scene$questions[[1]])) {
elementToAdd = paste0(elementToAdd, ", ")
}
retObject = paste0(retObject, elementToAdd)
}
retObject = paste0(retObject, "}}")
newModel = paste0(towModel, retObject)
dataToWebPPL = list(lazinessPrior = 0.3,
lazyPulling = 0.5,
matchInfo = scene)
rs <- webppl(program_code = newModel,
model_var = "tugOfWarModel",
inference_opts = list(method = 'rejection', samples = 1000),
data = dataToWebPPL,
data_var = "datafromR",
output_format = "samples"
)
w = ifelse(x %in% winners, 1, 2)
df.results[x,] <- c(x, w, mean(rs$strength1))
}
View(df.results)
df.plot = df.results %>%
mutate(rating = rating-50) %>%
mutate(id = as.factor(id),
winner = factor(winner,levels = c("1","2"),labels = c('Win', "Loss")),
rating = ifelse(winner == "Loss", rating*-1, rating))
ggplot(df.plot,aes(x = id, y = rating))+
stat_summary(fun.y = 'identity',geom='bar',color = 'black',fill = 'gray80')+
stat_summary(fun.data = 'mean_cl_boot',geom='linerange',size = 1)+
facet_wrap(~winner,scales = "free_x",ncol=1)+
labs(y = 'weakness/strength judgment', x = 'tournament number')+
theme_bw()+
theme(text = element_text(size = 20),
panel.grid = element_blank())
ggsave('../../../figures/plots/model1_nolazy_bars.pdf',width=10,height=6)
df.plot = df.results %>%
mutate(rating = rating-50) %>%
mutate(id = as.factor(id),
winner = factor(winner,levels = c("1","2"),labels = c('Win', "Loss")),
rating = ifelse(winner == "Loss", rating*-1, rating))
ggplot(df.plot,aes(x = id, y = rating))+
stat_summary(fun.y = 'identity',geom='bar',color = 'black',fill = 'gray80')+
stat_summary(fun.data = 'mean_cl_boot',geom='linerange',size = 1)+
facet_wrap(~winner,scales = "free_x",ncol=1)+
labs(y = 'weakness/strength judgment', x = 'tournament number')+
theme_bw()+
theme(text = element_text(size = 20),
panel.grid = element_blank())
ggsave('../../../figures/plots/model1_bars.pdf',width=10,height=6)
towModel <- '
// unpack data from R
var lazinessPrior = datafromR["lazinessPrior"][0]
var lazyPulling = datafromR["lazyPulling"][0]
var matchInfo = datafromR["matchInfo"][0]
var tugOfWarModel = function(){
var strength = mem(function(person) {
return gaussian(50, 25)
})
var lazy = mem(function(person, match) {
return flip(lazinessPrior)
})
var pulling = function(person, match) {
//return lazy(person, match) ? strength(person) - 13 : strength(person)
return strength(person)
}
var totalPulling = function(team, match) {
return sum(map(function(person) {
return pulling(person, match)
}, team))
}
var winner = function(team1, team2, match) {
return totalPulling(team1, match) > totalPulling(team2, match) ? team1 : team2
}
var beat = function(team1,team2, match){
return winner(team1,team2, match) == team1
}
var conditions = function(i, len) {
if (i < len) {
if (matchInfo.games[i].winner == 1) {
condition(beat(matchInfo.games[i].team1,
matchInfo.games[i].team2,
i + 1));
} else if (matchInfo.games[i].winner == 2) {
condition(beat(matchInfo.games[i].team2,
matchInfo.games[i].team1,
i + 1));
}
conditions(i + 1, len);
}
}
conditions(0, matchInfo.games.length);
'
jsonFile = "stim.json"
stim <- fromJSON("stim.json")
df.results <- data.frame(id=integer(), winner=integer(), rating=integer())
winners <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 21, 23, 24, 25, 27)
for (x in 1:30) {
scene = stim$scenarios[x,]
retObject = 'return { '
for (i in 1:length(scene$questions[[1]])) {
elementToAdd = ""
if (scene$questions[[1]][i] == 0) {
elementToAdd = paste0("'strength", scene$subjects[[1]][i, 1], "': strength(", scene$subjects[[1]][i, 1], ")")
} else if (scene$questions[[1]][i] == 1) {
elementToAdd = paste0("'laziness", scene$subjects[[1]][i, 1], scene$subjects[[1]][i, 2], "': lazy(", scene$subjects[[1]][i, 1], ", ", scene$subjects[[1]][i, 2], ")")
} else if (scene$questions[[1]][i] == 2) {
elementToAdd = paste0("'beat", scene$subjects[[1]][i, 1], scene$subjects[[1]][i, 2], "': beat(", scene$subjects[[1]][i, 1], ", ", scene$subjects[[1]][i, 2], ")")
}
if (i < length(scene$questions[[1]])) {
elementToAdd = paste0(elementToAdd, ", ")
}
retObject = paste0(retObject, elementToAdd)
}
retObject = paste0(retObject, "}}")
newModel = paste0(towModel, retObject)
dataToWebPPL = list(lazinessPrior = 0.3,
lazyPulling = 0.5,
matchInfo = scene)
rs <- webppl(program_code = newModel,
model_var = "tugOfWarModel",
inference_opts = list(method = 'rejection', samples = 1000),
data = dataToWebPPL,
data_var = "datafromR",
output_format = "samples"
)
w = ifelse(x %in% winners, 1, 2)
df.results[x,] <- c(x, w, mean(rs$strength1))
}
help()
towModel <- '
// unpack data from R
var lazinessPrior = datafromR["lazinessPrior"][0]
var lazyPulling = datafromR["lazyPulling"][0]
var matchInfo = datafromR["matchInfo"][0]
var tugOfWarModel = function(){
var strength = mem(function(person) {
return gaussian(50, 30)
})
var lazy = mem(function(person, match) {
return flip(lazinessPrior)
})
var pulling = function(person, match) {
return lazy(person, match) ? strength(person) - 15 : strength(person)
}
var totalPulling = function(team, match) {
return sum(map(function(person) {
return pulling(person, match)
}, team))
}
var winner = function(team1, team2, match) {
return totalPulling(team1, match) > totalPulling(team2, match) ? team1 : team2
}
var beat = function(team1,team2, match){
return winner(team1,team2, match) == team1
}
var conditions = function(i, len) {
if (i < len) {
if (matchInfo.games[i].winner == 1) {
condition(beat(matchInfo.games[i].team1,
matchInfo.games[i].team2,
i + 1));
} else if (matchInfo.games[i].winner == 2) {
condition(beat(matchInfo.games[i].team2,
matchInfo.games[i].team1,
i + 1));
}
conditions(i + 1, len);
}
}
conditions(0, matchInfo.games.length);
'
jsonFile = "stim.json"
stim <- fromJSON("stim.json")
df.results <- data.frame(id=integer(), winner=integer(), rating=integer())
winners <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 21, 23, 24, 25, 27)
for (x in 1:30) {
scene = stim$scenarios[x,]
retObject = 'return { '
for (i in 1:length(scene$questions[[1]])) {
elementToAdd = ""
if (scene$questions[[1]][i] == 0) {
elementToAdd = paste0("'strength", scene$subjects[[1]][i, 1], "': strength(", scene$subjects[[1]][i, 1], ")")
} else if (scene$questions[[1]][i] == 1) {
elementToAdd = paste0("'laziness", scene$subjects[[1]][i, 1], scene$subjects[[1]][i, 2], "': lazy(", scene$subjects[[1]][i, 1], ", ", scene$subjects[[1]][i, 2], ")")
} else if (scene$questions[[1]][i] == 2) {
elementToAdd = paste0("'beat", scene$subjects[[1]][i, 1], scene$subjects[[1]][i, 2], "': beat(", scene$subjects[[1]][i, 1], ", ", scene$subjects[[1]][i, 2], ")")
}
if (i < length(scene$questions[[1]])) {
elementToAdd = paste0(elementToAdd, ", ")
}
retObject = paste0(retObject, elementToAdd)
}
retObject = paste0(retObject, "}}")
newModel = paste0(towModel, retObject)
dataToWebPPL = list(lazinessPrior = 0.3,
lazyPulling = 0.5,
matchInfo = scene)
rs <- webppl(program_code = newModel,
model_var = "tugOfWarModel",
inference_opts = list(method = 'rejection', samples = 1000),
data = dataToWebPPL,
data_var = "datafromR",
output_format = "samples"
)
w = ifelse(x %in% winners, 1, 2)
df.results[x,] <- c(x, w, mean(rs$strength1))
}
df.plot = df.results %>%
mutate(rating = rating-50) %>%
mutate(id = as.factor(id),
winner = factor(winner,levels = c("1","2"),labels = c('Win', "Loss")),
rating = ifelse(winner == "Loss", rating*-1, rating))
ggplot(df.plot,aes(x = id, y = rating))+
stat_summary(fun.y = 'identity',geom='bar',color = 'black',fill = 'gray80')+
stat_summary(fun.data = 'mean_cl_boot',geom='linerange',size = 1)+
facet_wrap(~winner,scales = "free_x",ncol=1)+
labs(y = 'weakness/strength judgment', x = 'tournament number')+
theme_bw()+
theme(text = element_text(size = 20),
panel.grid = element_blank())
ggsave('../../../figures/plots/model1_bars.pdf',width=10,height=6)
