elementToAdd = paste0("'beat", scene$subjects[[1]][i, 1], scene$subjects[[1]][i, 2], "': wouldBeat(", scene$subjects[[1]][i, 1], ", ", scene$subjects[[1]][i, 2], ")")
ide = paste0(x-1, "-", scene$subjects[[1]][i, 1],",", scene$subjects[[1]][i, 2])
}
if (i < length(scene$questions[[1]])) {
elementToAdd = paste0(elementToAdd, ", ")
}
retObject = paste0(retObject, elementToAdd)
retObject = paste0(retObject, "}}")
newModel = paste0(towModel, retObject)
dataToWebPPL = list(lazinessPrior = 0.3,
lazyPulling = 0.5,
matchInfo = scene)
rs <- webppl(program_code = newModel,
model_var = "tugOfWarModel",
inference_opts = list(method = 'rejection', samples = 1000),
data = dataToWebPPL,
data_var = "datafromR",
output_format = "samples"
)
rs.tidy <- rs %>%
gather(key, val)
rs.tidy$val <- as.double(rs.tidy$val)
if (scene$questions[[1]][i] == 0) {
df.strength[sIndex,] <- c(ide, mean(rs.tidy$val))
} else if (scene$questions[[1]][i] == 1) {
df.lazy[lIndex,] <- c(ide, mean(rs.tidy$val))
} else if (scene$questions[[1]][i] == 2) {
df.wouldwin[wIndex,] <- c(ide, mean(rs.tidy$val))
}
}
}
#df.plot = df.results %>%
#  mutate(rating = rating-50) %>%
#  mutate(id = as.factor(id),
#        winner = factor(winner,levels = c("1","2"),labels = c('Win', "Loss")),
#         rating = ifelse(winner == "Loss", rating*-1, rating))
ggplot(df.strength,aes(x = id, y = rating))+
stat_summary(fun.y = 'identity',geom='bar',color = 'black',fill = 'gray80')+
labs(y = 'strength', x = 'tournament-player')+
theme_bw()+
theme(text = element_text(size = 10),
panel.grid = element_blank())
ggplot(df.lazy,aes(x = id, y = rating))+
stat_summary(fun.y = 'identity',geom='bar',color = 'black',fill = 'gray80')+
labs(y = 'probability of laziness', x = 'tournament-player,match')+
theme_bw()+
theme(text = element_text(size = 10),
panel.grid = element_blank())
ggplot(df.wouldwin,aes(x = id, y = rating))+
stat_summary(fun.y = 'identity',geom='bar',color = 'black',fill = 'gray80')+
labs(y = 'probability of player 1 win', x = 'tournament-player1,player2')+
theme_bw()+
theme(text = element_text(size = 10),
panel.grid = element_blank())
#ggsave('../../../figures/plots/model1_bars.pdf',width=10,height=6)
stim <- fromJSON("../../javascript/experiment_2/static/json/exp2_stim.json")
firstGame = 0
lastGame = 10
df.strength <- data.frame(id=character(), rating=double(), stringsAsFactors = FALSE)
df.lazy <- data.frame(id=character(), rating=double(), stringsAsFactors = FALSE)
df.wouldwin <- data.frame(id=character(), rating=double(), stringsAsFactors = FALSE)
sIndex = 0
lIndex = 0
wIndex = 0
for (x in (firstGame + 1):(lastGame + 1)) {
scene = stim$scenarios[x,]
for (i in 1:length(scene$questions[[1]])) {
retObject = 'return { '
elementToAdd = ""
ide = "0"
if (scene$questions[[1]][i] == 0) {
sIndex = sIndex + 1
elementToAdd = paste0("'strength", scene$subjects[[1]][i, 1], "': strength(", scene$subjects[[1]][i, 1], ")")
ide = paste0(x-1, "-", scene$subjects[[1]][i, 1])
} else if (scene$questions[[1]][i] == 1) {
lIndex = lIndex + 1
elementToAdd = paste0("'laziness", scene$subjects[[1]][i, 1], scene$subjects[[1]][i, 2], "': lazy(", scene$subjects[[1]][i, 1], ", ", scene$subjects[[1]][i, 2], ")")
ide = paste0(x-1, "-", scene$subjects[[1]][i, 1],",", scene$subjects[[1]][i, 2])
} else if (scene$questions[[1]][i] == 2) {
wIndex = wIndex + 1
elementToAdd = paste0("'beat", scene$subjects[[1]][i, 1], scene$subjects[[1]][i, 2], "': wouldBeat(", scene$subjects[[1]][i, 1], ", ", scene$subjects[[1]][i, 2], ")")
ide = paste0(x-1, "-", scene$subjects[[1]][i, 1],",", scene$subjects[[1]][i, 2])
}
if (i < length(scene$questions[[1]])) {
elementToAdd = paste0(elementToAdd, ", ")
}
retObject = paste0(retObject, elementToAdd)
retObject = paste0(retObject, "}}")
newModel = paste0(towModel, retObject)
dataToWebPPL = list(lazinessPrior = 0.3,
lazyPulling = 0.5,
matchInfo = scene)
rs <- webppl(program_code = newModel,
model_var = "tugOfWarModel",
inference_opts = list(method = 'rejection', samples = 1000),
data = dataToWebPPL,
data_var = "datafromR",
output_format = "samples"
)
rs.tidy <- rs %>%
gather(key, val)
rs.tidy$val <- as.double(rs.tidy$val)
if (scene$questions[[1]][i] == 0) {
df.strength[sIndex,] <- c(ide, mean(rs.tidy$val))
} else if (scene$questions[[1]][i] == 1) {
df.lazy[lIndex,] <- c(ide, mean(rs.tidy$val))
} else if (scene$questions[[1]][i] == 2) {
df.wouldwin[wIndex,] <- c(ide, mean(rs.tidy$val))
}
}
}
stim <- fromJSON("../../javascript/experiment_2/static/json/exp2_stim.json")
firstGame = 0
lastGame = 9
df.strength <- data.frame(id=character(), rating=double(), stringsAsFactors = FALSE)
df.lazy <- data.frame(id=character(), rating=double(), stringsAsFactors = FALSE)
df.wouldwin <- data.frame(id=character(), rating=double(), stringsAsFactors = FALSE)
sIndex = 0
lIndex = 0
wIndex = 0
for (x in (firstGame + 1):(lastGame + 1)) {
scene = stim$scenarios[x,]
for (i in 1:length(scene$questions[[1]])) {
retObject = 'return { '
elementToAdd = ""
ide = "0"
if (scene$questions[[1]][i] == 0) {
sIndex = sIndex + 1
elementToAdd = paste0("'strength", scene$subjects[[1]][i, 1], "': strength(", scene$subjects[[1]][i, 1], ")")
ide = paste0(x-1, "-", scene$subjects[[1]][i, 1])
} else if (scene$questions[[1]][i] == 1) {
lIndex = lIndex + 1
elementToAdd = paste0("'laziness", scene$subjects[[1]][i, 1], scene$subjects[[1]][i, 2], "': lazy(", scene$subjects[[1]][i, 1], ", ", scene$subjects[[1]][i, 2], ")")
ide = paste0(x-1, "-", scene$subjects[[1]][i, 1],",", scene$subjects[[1]][i, 2])
} else if (scene$questions[[1]][i] == 2) {
wIndex = wIndex + 1
elementToAdd = paste0("'beat", scene$subjects[[1]][i, 1], scene$subjects[[1]][i, 2], "': wouldBeat(", scene$subjects[[1]][i, 1], ", ", scene$subjects[[1]][i, 2], ")")
ide = paste0(x-1, "-", scene$subjects[[1]][i, 1],",", scene$subjects[[1]][i, 2])
}
if (i < length(scene$questions[[1]])) {
elementToAdd = paste0(elementToAdd, ", ")
}
retObject = paste0(retObject, elementToAdd)
retObject = paste0(retObject, "}}")
newModel = paste0(towModel, retObject)
dataToWebPPL = list(lazinessPrior = 0.3,
lazyPulling = 0.5,
matchInfo = scene)
rs <- webppl(program_code = newModel,
model_var = "tugOfWarModel",
inference_opts = list(method = 'rejection', samples = 1000),
data = dataToWebPPL,
data_var = "datafromR",
output_format = "samples"
)
rs.tidy <- rs %>%
gather(key, val)
rs.tidy$val <- as.double(rs.tidy$val)
if (scene$questions[[1]][i] == 0) {
df.strength[sIndex,] <- c(ide, mean(rs.tidy$val))
} else if (scene$questions[[1]][i] == 1) {
df.lazy[lIndex,] <- c(ide, mean(rs.tidy$val))
} else if (scene$questions[[1]][i] == 2) {
df.wouldwin[wIndex,] <- c(ide, mean(rs.tidy$val))
}
}
}
#df.plot = df.results %>%
#  mutate(rating = rating-50) %>%
#  mutate(id = as.factor(id),
#        winner = factor(winner,levels = c("1","2"),labels = c('Win', "Loss")),
#         rating = ifelse(winner == "Loss", rating*-1, rating))
ggplot(df.strength,aes(x = id, y = rating))+
stat_summary(fun.y = 'identity',geom='bar',color = 'black',fill = 'gray80')+
labs(y = 'strength', x = 'tournament-player')+
theme_bw()+
theme(text = element_text(size = 10),
panel.grid = element_blank())
ggplot(df.lazy,aes(x = id, y = rating))+
stat_summary(fun.y = 'identity',geom='bar',color = 'black',fill = 'gray80')+
labs(y = 'probability of laziness', x = 'tournament-player,match')+
theme_bw()+
theme(text = element_text(size = 10),
panel.grid = element_blank())
ggplot(df.wouldwin,aes(x = id, y = rating))+
stat_summary(fun.y = 'identity',geom='bar',color = 'black',fill = 'gray80')+
labs(y = 'probability of player 1 win', x = 'tournament-player1,player2')+
theme_bw()+
theme(text = element_text(size = 10),
panel.grid = element_blank())
#ggsave('../../../figures/plots/model1_bars.pdf',width=10,height=6)
#df.plot = df.results %>%
#  mutate(rating = rating-50) %>%
#  mutate(id = as.factor(id),
#        winner = factor(winner,levels = c("1","2"),labels = c('Win', "Loss")),
#         rating = ifelse(winner == "Loss", rating*-1, rating))
ggplot(df.strength,aes(x = id, y = rating))+
stat_summary(fun.y = 'identity',geom='bar',color = 'black',fill = 'gray80')+
labs(y = 'strength', x = 'tournament-player')+
theme_bw()+
theme(text = element_text(size = 10),
)
ggplot(df.lazy,aes(x = id, y = rating))+
stat_summary(fun.y = 'identity',geom='bar',color = 'black',fill = 'gray80')+
labs(y = 'probability of laziness', x = 'tournament-player,match')+
theme_bw()+
theme(text = element_text(size = 10),
panel.grid = element_blank())
ggplot(df.wouldwin,aes(x = id, y = rating))+
stat_summary(fun.y = 'identity',geom='bar',color = 'black',fill = 'gray80')+
labs(y = 'probability of player 1 win', x = 'tournament-player1,player2')+
theme_bw()+
theme(text = element_text(size = 10),
panel.grid = element_blank())
#ggsave('../../../figures/plots/model1_bars.pdf',width=10,height=6)
#df.plot = df.results %>%
#  mutate(rating = rating-50) %>%
#  mutate(id = as.factor(id),
#        winner = factor(winner,levels = c("1","2"),labels = c('Win', "Loss")),
#         rating = ifelse(winner == "Loss", rating*-1, rating))
ggplot(df.strength,aes(x = id, y = rating))+
stat_summary(fun.y = 'identity',geom='bar',color = 'black',fill = 'gray80')+
labs(y = 'strength', x = 'tournament-player')+
theme_bw()+
theme(text = element_text(size = 10),
panel.grid = element_blank())
ggplot(df.lazy,aes(x = id, y = rating))+
stat_summary(fun.y = 'identity',geom='bar',color = 'black',fill = 'gray80')+
labs(y = 'probability of laziness', x = 'tournament-player,match')+
theme_bw()+
theme(text = element_text(size = 10),
panel.grid = element_blank())
ggplot(df.wouldwin,aes(x = id, y = rating))+
stat_summary(fun.y = 'identity',geom='bar',color = 'black',fill = 'gray80')+
labs(y = 'probability of player 1 win', x = 'tournament-player1,player2')+
theme_bw()+
theme(text = element_text(size = 10),
panel.grid = element_blank())
#ggsave('../../../figures/plots/model1_bars.pdf',width=10,height=6)
#df.plot = df.results %>%
#  mutate(rating = rating-50) %>%
#  mutate(id = as.factor(id),
#        winner = factor(winner,levels = c("1","2"),labels = c('Win', "Loss")),
#         rating = ifelse(winner == "Loss", rating*-1, rating))
ggplot(df.strength,aes(x = id, y = rating))+
stat_summary(fun.y = 'identity',geom='bar',color = 'black',fill = 'gray80')+
labs(y = 'strength', x = 'tournament-player')+
theme_bw()+
scale_y_continuous(limits = c(0,100))+
theme(text = element_text(size = 10),
panel.grid = element_blank())
#df.plot = df.results %>%
#  mutate(rating = rating-50) %>%
#  mutate(id = as.factor(id),
#        winner = factor(winner,levels = c("1","2"),labels = c('Win', "Loss")),
#         rating = ifelse(winner == "Loss", rating*-1, rating))
ggplot(df.strength,aes(x = id, y = rating))+
stat_summary(fun.y = 'identity',geom='bar',color = 'black',fill = 'gray80')+
labs(y = 'strength', x = 'tournament-player')+
theme_bw()+
#scale_y_continuous(limits = c(0,100))+
theme(text = element_text(size = 10),
panel.grid = element_blank())
ggplot(df.lazy,aes(x = id, y = rating))+
stat_summary(fun.y = 'identity',geom='bar',color = 'black',fill = 'gray80')+
labs(y = 'probability of laziness', x = 'tournament-player,match')+
theme_bw()+
theme(text = element_text(size = 10),
panel.grid = element_blank())
ggplot(df.wouldwin,aes(x = id, y = rating))+
stat_summary(fun.y = 'identity',geom='bar',color = 'black',fill = 'gray80')+
labs(y = 'probability of player 1 win', x = 'tournament-player1,player2')+
theme_bw()+
theme(text = element_text(size = 10),
panel.grid = element_blank())
#ggsave('../../../figures/plots/model1_bars.pdf',width=10,height=6)
#df.plot = df.results %>%
#  mutate(rating = rating-50) %>%
#  mutate(id = as.factor(id),
#        winner = factor(winner,levels = c("1","2"),labels = c('Win', "Loss")),
#         rating = ifelse(winner == "Loss", rating*-1, rating))
ggplot(df.strength,aes(x = id, y = as.numeric(rating)))+
stat_summary(fun.y = 'identity',geom='bar',color = 'black',fill = 'gray80')+
labs(y = 'strength', x = 'tournament-player')+
theme_bw()+
#scale_y_continuous(limits = c(0,100))+
theme(text = element_text(size = 10),
panel.grid = element_blank())
ggplot(df.lazy,aes(x = id, y = rating))+
stat_summary(fun.y = 'identity',geom='bar',color = 'black',fill = 'gray80')+
labs(y = 'probability of laziness', x = 'tournament-player,match')+
theme_bw()+
theme(text = element_text(size = 10),
panel.grid = element_blank())
ggplot(df.wouldwin,aes(x = id, y = rating))+
stat_summary(fun.y = 'identity',geom='bar',color = 'black',fill = 'gray80')+
labs(y = 'probability of player 1 win', x = 'tournament-player1,player2')+
theme_bw()+
theme(text = element_text(size = 10),
panel.grid = element_blank())
#ggsave('../../../figures/plots/model1_bars.pdf',width=10,height=6)
df.strength <- data.frame(id=character(), rating=double(), stringsAsFactors = FALSE)
save(list = c("df.results"),file = 'exp1_predictions.RData')
#df.plot = df.results %>%
#  mutate(rating = rating-50) %>%
#  mutate(id = as.factor(id),
#        winner = factor(winner,levels = c("1","2"),labels = c('Win', "Loss")),
#         rating = ifelse(winner == "Loss", rating*-1, rating))
ggplot(df.strength,aes(x = id, y = as.numeric(rating)))+
stat_summary(fun.y = 'identity',geom='bar',color = 'black',fill = 'gray80')+
labs(y = 'strength', x = 'tournament-player')+
theme_bw()+
scale_y_continuous(limits = c(0,100))+
theme(text = element_text(size = 10),
panel.grid = element_blank())
ggplot(df.lazy,aes(x = id, y = rating))+
stat_summary(fun.y = 'identity',geom='bar',color = 'black',fill = 'gray80')+
labs(y = 'probability of laziness', x = 'tournament-player,match')+
theme_bw()+
theme(text = element_text(size = 10),
panel.grid = element_blank())
ggplot(df.wouldwin,aes(x = id, y = rating))+
stat_summary(fun.y = 'identity',geom='bar',color = 'black',fill = 'gray80')+
labs(y = 'probability of player 1 win', x = 'tournament-player1,player2')+
theme_bw()+
theme(text = element_text(size = 10),
panel.grid = element_blank())
#ggsave('../../../figures/plots/model1_bars.pdf',width=10,height=6)
stim <- fromJSON("../../javascript/experiment_2/static/json/exp2_stim.json")
firstGame = 0
lastGame = 9
df.strength <- data.frame(id=character(), rating=double(), stringsAsFactors = FALSE)
df.lazy <- data.frame(id=character(), rating=double(), stringsAsFactors = FALSE)
df.wouldwin <- data.frame(id=character(), rating=double(), stringsAsFactors = FALSE)
sIndex = 0
lIndex = 0
wIndex = 0
for (x in (firstGame + 1):(lastGame + 1)) {
scene = stim$scenarios[x,]
for (i in 1:length(scene$questions[[1]])) {
retObject = 'return { '
elementToAdd = ""
ide = "0"
if (scene$questions[[1]][i] == 0) {
sIndex = sIndex + 1
elementToAdd = paste0("'strength", scene$subjects[[1]][i, 1], "': strength(", scene$subjects[[1]][i, 1], ")")
ide = paste0(x-1, "-", scene$subjects[[1]][i, 1])
} else if (scene$questions[[1]][i] == 1) {
lIndex = lIndex + 1
elementToAdd = paste0("'laziness", scene$subjects[[1]][i, 1], scene$subjects[[1]][i, 2], "': lazy(", scene$subjects[[1]][i, 1], ", ", scene$subjects[[1]][i, 2], ")")
ide = paste0(x-1, "-", scene$subjects[[1]][i, 1],",", scene$subjects[[1]][i, 2])
} else if (scene$questions[[1]][i] == 2) {
wIndex = wIndex + 1
elementToAdd = paste0("'beat", scene$subjects[[1]][i, 1], scene$subjects[[1]][i, 2], "': wouldBeat(", scene$subjects[[1]][i, 1], ", ", scene$subjects[[1]][i, 2], ")")
ide = paste0(x-1, "-", scene$subjects[[1]][i, 1],",", scene$subjects[[1]][i, 2])
}
if (i < length(scene$questions[[1]])) {
elementToAdd = paste0(elementToAdd, ", ")
}
retObject = paste0(retObject, elementToAdd)
retObject = paste0(retObject, "}}")
newModel = paste0(towModel, retObject)
dataToWebPPL = list(lazinessPrior = 0.3,
lazyPulling = 0.5,
matchInfo = scene)
rs <- webppl(program_code = newModel,
model_var = "tugOfWarModel",
inference_opts = list(method = 'rejection', samples = 1000),
data = dataToWebPPL,
data_var = "datafromR",
output_format = "samples"
)
rs.tidy <- rs %>%
gather(key, val)
rs.tidy$val <- as.double(rs.tidy$val)
if (scene$questions[[1]][i] == 0) {
df.strength[sIndex,] <- c(ide, mean(rs.tidy$val))
} else if (scene$questions[[1]][i] == 1) {
df.lazy[lIndex,] <- c(ide, mean(rs.tidy$val))
} else if (scene$questions[[1]][i] == 2) {
df.wouldwin[wIndex,] <- c(ide, mean(rs.tidy$val))
}
}
}
#df.plot = df.results %>%
#  mutate(rating = rating-50) %>%
#  mutate(id = as.factor(id),
#        winner = factor(winner,levels = c("1","2"),labels = c('Win', "Loss")),
#         rating = ifelse(winner == "Loss", rating*-1, rating))
ggplot(df.strength,aes(x = id, y = as.numeric(rating)))+
stat_summary(fun.y = 'identity',geom='bar',color = 'black',fill = 'gray80')+
labs(y = 'strength', x = 'tournament-player')+
theme_bw()+
scale_y_continuous(limits = c(0,100))+
theme(text = element_text(size = 10),
panel.grid = element_blank())
ggplot(df.lazy,aes(x = id, y = rating))+
stat_summary(fun.y = 'identity',geom='bar',color = 'black',fill = 'gray80')+
labs(y = 'probability of laziness', x = 'tournament-player,match')+
theme_bw()+
theme(text = element_text(size = 10),
panel.grid = element_blank())
ggplot(df.wouldwin,aes(x = id, y = rating))+
stat_summary(fun.y = 'identity',geom='bar',color = 'black',fill = 'gray80')+
labs(y = 'probability of player 1 win', x = 'tournament-player1,player2')+
theme_bw()+
theme(text = element_text(size = 10),
panel.grid = element_blank())
#ggsave('../../../figures/plots/model1_bars.pdf',width=10,height=6)
help(nbinom)
help(nbinom())
help(pbinom)
pbinom(110, 250, 0.5)
pbinom(110, 250, 0.5) * 2
pbinom(5, 250, 0.5) * 2
pbinom(100, 250, 0.5) * 2
pbinom(95, 250, 0.5) * 2
pbinom(99, 250, 0.5) * 2
pbinom(98, 250, 0.5) * 2
x = 0:100
x
x = 0:250
df = data.frame()
df$x = x
df = x
df
x
2 * pbinom(105, 250, 0.5)
2 * pbinom(110, 250, 0.5)
2 * pbinom(109, 250, 0.5)
2 * pbinom(109, 250, 0.5)
x
sum(dbinom(0:109, 250, 0.6)) + sum(dbinom(141:250, 250, 0.6))
sum(dbinom(0:109, 250, 0.55)) + sum(dbinom(141:250, 250, 0.55))
qbinom(0.05, 250, 0.5)
qbinom(0.025, 250, 0.5)
qbinom(0.005, 250, 0.5)
qbinom(0.01, 250, 0.5)
pbinom(107, 250, 0.5)
pbinom(105, 250, 0.5)
pbinom(106, 250, 0.5)
pbinom(104, 250, 0.5)
pbinom(104, 250, 0.5)*2
pbinom(99, 250, 0.5)*2
qbinom(0.005, 250, 0.5)
qbinom(0.025, 250, 0.5)
pbinom(110, 250, 0.55) + pbinom(250-110, 250, 0.55)
x = qbinom(0.025, 200, 0.5)
x = 200
pbinom(qbinom(0.025, x, 0.5), x, 0.55) + pbinom(250-qbinom(0.025, x, 0.5), x, 0.55)
x = 250
pbinom(qbinom(0.025, x, 0.5), x, 0.55) + pbinom(250-qbinom(0.025, x, 0.5), x, 0.55)
pbinom(qbinom(0.025, x, 0.5), x, 0.55) + (1-pbinom(250-qbinom(0.025, x, 0.5), x, 0.55))
x=200
pbinom(qbinom(0.025, x, 0.5), x, 0.55) + (1-pbinom(250-qbinom(0.025, x, 0.5), x, 0.55))
x = 300
pbinom(qbinom(0.025, x, 0.5), x, 0.55) + (1-pbinom(250-qbinom(0.025, x, 0.5), x, 0.55))
pbinom(qbinom(0.025, x, 0.5), x, 0.55) + (1-pbinom(x-qbinom(0.025, x, 0.5), x, 0.55))
x
x = 1000
pbinom(qbinom(0.025, x, 0.5), x, 0.55) + (1-pbinom(x-qbinom(0.025, x, 0.5), x, 0.55))
x = 1200
pbinom(qbinom(0.025, x, 0.5), x, 0.55) + (1-pbinom(x-qbinom(0.025, x, 0.5), x, 0.55))
x = 1100
pbinom(qbinom(0.025, x, 0.5), x, 0.55) + (1-pbinom(x-qbinom(0.025, x, 0.5), x, 0.55))
x = 1050
pbinom(qbinom(0.025, x, 0.5), x, 0.55) + (1-pbinom(x-qbinom(0.025, x, 0.5), x, 0.55))
x = 1075
pbinom(qbinom(0.025, x, 0.5), x, 0.55) + (1-pbinom(x-qbinom(0.025, x, 0.5), x, 0.55))
x = 1085
pbinom(qbinom(0.025, x, 0.5), x, 0.55) + (1-pbinom(x-qbinom(0.025, x, 0.5), x, 0.55))
x = 1084
x = 1084
pbinom(qbinom(0.025, x, 0.5), x, 0.55) + (1-pbinom(x-qbinom(0.025, x, 0.5), x, 0.55))
x = 1083
pbinom(qbinom(0.025, x, 0.5), x, 0.55) + (1-pbinom(x-qbinom(0.025, x, 0.5), x, 0.55))
x = 1082
pbinom(qbinom(0.025, x, 0.5), x, 0.55) + (1-pbinom(x-qbinom(0.025, x, 0.5), x, 0.55))
x = 1081
pbinom(qbinom(0.025, x, 0.5), x, 0.55) + (1-pbinom(x-qbinom(0.025, x, 0.5), x, 0.55))
x = 1080
pbinom(qbinom(0.025, x, 0.5), x, 0.55) + (1-pbinom(x-qbinom(0.025, x, 0.5), x, 0.55))
x = 1079
pbinom(qbinom(0.025, x, 0.5), x, 0.55) + (1-pbinom(x-qbinom(0.025, x, 0.5), x, 0.55))
x = 1078
pbinom(qbinom(0.025, x, 0.5), x, 0.55) + (1-pbinom(x-qbinom(0.025, x, 0.5), x, 0.55))
x = 1077
qbinom(0.025, x, 0.5)
qbinom(0.025, 250, 0.5)
x = 1077
pbinom(qbinom(0.025, x, 0.5), x, 0.55) + (1-pbinom(x-qbinom(0.025, x, 0.5), x, 0.55))
x = 1076
pbinom(qbinom(0.025, x, 0.5), x, 0.55) + (1-pbinom(x-qbinom(0.025, x, 0.5), x, 0.55))
x = 1075
pbinom(qbinom(0.025, x, 0.5), x, 0.55) + (1-pbinom(x-qbinom(0.025, x, 0.5), x, 0.55))
x = 1074
pbinom(qbinom(0.025, x, 0.5), x, 0.55) + (1-pbinom(x-qbinom(0.025, x, 0.5), x, 0.55))
x = 1072
pbinom(qbinom(0.025, x, 0.5), x, 0.55) + (1-pbinom(x-qbinom(0.025, x, 0.5), x, 0.55))
x = 1070
pbinom(qbinom(0.025, x, 0.5), x, 0.55) + (1-pbinom(x-qbinom(0.025, x, 0.5), x, 0.55))
x = 1068
pbinom(qbinom(0.025, x, 0.5), x, 0.55) + (1-pbinom(x-qbinom(0.025, x, 0.5), x, 0.55))
x = 1066
pbinom(qbinom(0.025, x, 0.5), x, 0.55) + (1-pbinom(x-qbinom(0.025, x, 0.5), x, 0.55))
dbinom(140, 250, 0.55)
dbinom(140, 250, 0.5)
help(pt)
1 - pt(1.901, 3)
1 - pt(1.901, 4)
1 - pt(2, 15)
help(qnorm)
