{
    "collab_server" : "",
    "contents" : "---\ntitle: \"tug-of-war\"\nauthor: \"M. H. Tessler\"\ndate: \"November 1, 2016\"\noutput: html_document\n---\n\n```{r helpers, echo = F}\nlibrary(knitr)\nknitr::opts_chunk$set(fig.crop = F,echo=T, \n                      warning=F, cache=F, \n                      message=F, sanitize = T)\n\nlibrary(rwebppl)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(coda)\n\n# # to get the maximum a posteriori value [MAP] (from samples)\n# estimate_mode <- function(s) {\n#   d <- density(s)\n#   return(d$x[which.max(d$y)])\n# }\n# # upper bound of 95% credible interval\n# hdi_upper<- function(s){\n#   m <- HPDinterval(mcmc(s))\n#   return(m[\"var1\",\"upper\"])\n# }\n# # lower bound of 95% credible interval\n# hdi_lower<- function(s){\n#   m <- HPDinterval(mcmc(s))\n#   return(m[\"var1\",\"lower\"])\n# }\n```\n\n## Tug of war model\n\nPossible questions: \n\n1. \"What is the strength of A?\"\n2. \"Was A being lazy in match N?\"\n3. \"Who will win: A vs. B?\"\"\n\n```{r towModel}\ntowModel <- '\n// unpack data from R\nvar lazinessPrior = datafromR[\"lazinessPrior\"][0]\nvar lazyPulling = datafromR[\"lazyPulling\"][0]\nvar matchInfo = datafromR[\"matchInfo\"]\n\nvar tugOfWarModel = function(){\n\n    var strength = mem(function(person){\n      return gaussian(10, 3)\n    })\n\n    // laziness is a memoized function of a person and match\n    // so we can later ask if a person was lazy on a particular match\n    var lazy = mem(function(person, match){\n      return flip(lazinessPrior)\n    })\n\n    var pulling = function(person, match) {\n      return lazy(person, match) ?\n              strength(person) * lazyPulling :\n              strength(person)\n    }\n\n    var totalPulling = function(team, match){\n      return sum(map(pulling, team)) \n    }\n  \n    var winner = function(team1, team2, match){\n      return totalPulling(team1, match) > totalPulling(team2, match) ? team1 : team2\n    }\n\n    var beat = function(team1,team2, match){\n      return winner(team1,team2, match) == team1\n    }\n\n    condition(beat(matchInfo.match1.winner, \n                   matchInfo.match1.loser,\n                    matchInfo.match1.match))\n\n    matchInfo.match2 ? \n        condition(beat(matchInfo.match2.winner, \n                       matchInfo.match2.loser, \n                       matchInfo.match2.match)) : null\n    matchInfo.match3 ? \n        condition(beat(matchInfo.match3.winner, \n                       matchInfo.match3.loser, \n                       matchInfo.match3.match)) : null\n\n    // example return statements\n    // you can return a JSON object of whatever you want\n    return {\n      lazy: lazy(matchInfo.query.lazy),\n      strength: strength(matchInfo.query.strength),\n      winner: beat(matchInfo.query.team1, matchInfo.query.team2)\n    }\n}\n'\n```\n\nDefine match information (the only information that's used in the model above is the winner/loser information, though the other information would be used in data analysis models).\n\nAlso, define the lazinessPrior and lazyPulling variables, package them up into `dataToWebPPL`, and pass it to the WebPPL model using the `data` and `data_var` options. (?webppl for more details)\n\n```{r runTowModel}\nmatchInfo = list(\n  # outcome = \"win\",\n  # pattern = \"round robin\",\n  # tournament = \"double\",\n  match1 = list(\n    winner = c(\"A\"),\n    loser = c(\"C\"),\n    match = 1\n  ),\n  match2 = list(\n    winner = c(\"C\"),\n    loser = c(\"A\"),\n    match = 2\n  ),\n  # match3 = list(\n  #   winner = c(\"A\", \"D\"),\n  #   loser = c(\"B\", \"C\"),\n  #   match = 3\n  # ),\n  query = list( \n    lazy = c(\"A\",1),\n    strength = \"C\",\n    team1 = c(\"A\",\"E\"),\n    team2 = c(\"B\",\"C\")\n    )\n)\n\ndataToWebPPL = list(lazinessPrior = 0.3, \n                    lazyPulling = 0.5,\n                    matchInfo = matchInfo)\n\nrs <- webppl(program_code = towModel, \n             model_var = \"tugOfWarModel\",\n  inference_opts = list(method = 'rejection', samples = 10),\n  data = dataToWebPPL,\n  data_var = \"datafromR\",\n  output_format = \"samples\"\n)\n\n# Plotting the results\nrs.tidy <- rs %>%\n  gather(key, val)\n\nggplot(rs.tidy, aes( x = val ))+\n  geom_histogram() +\n  facet_wrap(~key, scales = 'free')\n```",
    "created" : 1478633645767.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "235852216",
    "id" : "41D6C6D3",
    "lastKnownWriteTime" : 1479140200,
    "last_content_update" : 1479140200677,
    "path" : "~/Documents/work/projects_git/tug-of-war/models/tug-of-war.Rmd",
    "project_path" : "tug-of-war.Rmd",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}